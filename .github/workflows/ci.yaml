name: EC2 Metadata Mock CI and Release

on: [push, pull_request, workflow_dispatch]

env:
  DEFAULT_GO_VERSION: ^1.15
  IS_PUSH: ${{ github.event_name == 'push' }}
  GITHUB_USERNAME: ${{ secrets.EC2_BOT_GITHUB_USERNAME }}
  GITHUB_TOKEN: ${{ secrets.EC2_BOT_GITHUB_TOKEN }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:

  buildAndTest:
    name: Build and Test
    runs-on: ubuntu-20.04
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.DEFAULT_GO_VERSION }}

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Build
      run: make build

    - name: Unit Tests
      run: make unit-test
    
    - name: Lints
      run: make spellcheck shellcheck

    - name: Go Report Card Tests
      run: make go-report-card-test

    - name: Readme Length Validator
      run: make validate-readme
    
    - name: Brew Sync Dry run
      run: make homebrew-sync-dry-run

    - name: License Test
      if: ${{ env.IS_PUSH == true }}
      run: make license-test

    - name: E2E Tests
      run: make e2e-test

    - name: Mock IP Count Test
      run: make helm-mock-ip-count-test

    - name: Build Release Assets
      run: make build-release-assets

    - name: Build Docker Images Linux
      run: make build-docker-images-linux

  buildWindows:
    name: Build Docker Images Windows
    runs-on: windows-2019
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.DEFAULT_GO_VERSION }}

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Build Docker Images Windows
      run: choco install make && RefreshEnv.cmd && make build-docker-images-windows
    
  release:
    name: Release
    runs-on: ubuntu-20.04
    needs: [buildAndTest]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.DEFAULT_GO_VERSION }}

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    
    - name: Validate Release Version
      run: make validate-release-version

    - name: Github Release
      run: make release-github

    - name: Release Docker Linux
      run: make release-docker-linux
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
  releaseWindows:
    name: Release Windows
    runs-on: windows-2019
    needs: [buildAndTest, buildWindows]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.DEFAULT_GO_VERSION }}

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Release Windows Docker Image
      run: choco install make && RefreshEnv.cmd && make release-docker-windows
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  postRelease:
    name: Post Release
    runs-on: ubuntu-20.04
    needs: [release, releaseWindows]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.DEFAULT_GO_VERSION }}

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    
    - name: Sync to Homebrew
      run: make homebrew-sync


  helmLint:
    name: Helm Lint Test
    runs-on: ubuntu-20.04
    needs: [release, releaseWindows]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.DEFAULT_GO_VERSION }}

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    
    - name: Helm Lint Test
      run: make validate-release-version

  chartTests:
    name: Helm Chart Tests
    runs-on: ubuntu-20.04
    needs: [release, releaseWindows]
    # Skip running this stage when updating release versions as part of release prep
    # as the new Docker image wouldn't be available yet and previous commits should have already been tested.
    # Since the release prep commit will be the release commit, always run this stage when a new tag is pushed, as part of a release.
    if: ${{ !contains(github.event.head_commit.message, 'Skip Helm E2E Tests') || (github.event_name == 'push' && contains(github.ref, 'refs/tags/')) }}
    strategy:
      matrix:
        k8sVersion: [1.12, 1.13, 1.14, 1.15, 1.16, 1.17, 1.18]
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.DEFAULT_GO_VERSION }}

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    
    - name: Helm Chart Tests
      run: test/helm/chart-test.sh -i -k ${{ matrix.k8sVersion }}